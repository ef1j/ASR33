#!/usr/bin/env python
"""
cell <N> <chars> <N> <chars>...

Wolfram 1-dimensional cellular automata.
Print automaton rule <N> using <chars>,
   N is the "rule number", and
   chars is two characters (e.g. "ab") that map to 1 and 0,

If <chars> is empty, use "-"
If <chars> is a single character, use a space for its pair.

Rule numbers are 0 to 255.  They fall into a few groups,
    fractal-like: 18 22 26 60 82 90 102 105 126...
    noisy:  30 45 73 75 86 89 101...
    other: 57 65 77 78 92 99 110 124...

Examples:
    cell 3 ".'" 110 "O" -f -s 230
    cell 81 "\\" 52 "C"
    cell 87 ".'" 124
    cell 225 "\\ " 102 "," -f -s 48

"""

import sys
import io
from random import random
import click


class Automaton(object):
    """
    Wolfram cellular automation with rule <pattern>.
    If neighbors are (1, 1, 1) produce the 7th-bit of 'pattern', etc.
       data 111 => (pattern >> 7) & 1
            110 => (pattern >> 6) & 1
            101 => (pattern >> 5) & 1
            100 => (pattern >> 4) & 1
            011 => (pattern >> 3) & 1
            010 => (pattern >> 2) & 1
            001 => (pattern >> 1) & 1
            000 => (pattern >> 0) & 1
    Wrap around the row edges.
    """

    def __init__(self, pattern, width, rand=True):
        self.pattern = pattern
        # self.data is an array of integers representing binary 0 or 1
        if rand:
            # initialize with random data
            self.data = [int(random() * 1.25) for _ in range(width)]
        else:
            # initialize all zeros, with a 1 in the middle
            self.data = [0] * width
            self.data[width // 2] = 1

    def point(self, i):
        """
        compute the iteration of a single point, index 'i'
        as:
            pattern >> (binary: data[i-1] data[i] data[i+1]) & 1
        where
            pattern: integer i range 0-255, i.e. an 8-bit value
            data[...] wraps beyond the array boundaries
        """
        shift = 0
        h = i - 1
        if h < 0:
            h = len(self.data) - 1
        j = i + 1
        if j >= len(self.data):
            j = 0
        shift += self.data[h] << 2
        shift += self.data[i] << 1
        shift += self.data[j]
        return (self.pattern >> shift) & 1

    def iter(self):
        """
        Iterate the array once
        """
        newdata = [self.point(i) for i in range(len(self.data))]
        self.data = newdata

    def render(self, chars):
        """
        Render the current line of data as characters from <chars>
        where chars: string with 2^n characters,
        """
        ch = chars
        if len(ch) < 1:
            ch = "- "
        if len(ch) < 2:
            ch = " " + ch
        line = "".join([ch[d] for d in self.data]).rstrip()
        return line


@click.command()
@click.argument("param", nargs=-1, required=True)
@click.option("--width", "-w", type=int, default=70,
              help="Width (default: 70 characters)")
@click.option("--length", "-l", type=int, default=30,
              help="Length (default: 30 rows)")
@click.option("--skip", "-s", type=int, default=0,
              help="Number of rows to skip (default: 0)")
@click.option("--fixed", "-f", is_flag=True,
              help="Initialize with fixed data")
@click.option('--output', "-o", default="-",
              help='Output filename (use "-" for stdout)')
def main(param, width, length, skip, fixed, output):
    """
    Render a cellular automaton

    <N> <characters> <N> <characters> ...
    """
    if output == "-":
        output = 1  # stdout

    # Need an even number of parameters
    while len(param) % 2 != 0:
        param = list(param)
        param.append("-")

    # Make an automaton for each pattern
    autos = []
    chars = []
    try:
        for i in range(0, len(param), 2):
            pattern = int(param[i])
            auto = Automaton(pattern, width, not fixed)
            autos.append(auto)
            chars.append(param[i+1])
            for _ in range(skip):
                auto.iter()
    except Exception as exc:
        sys.exit(exc)

    with io.open(output, "wb") as f:
        # Render into rows with overstrike
        for _ in range(length):
            lines = [autos[i].render(chars[i])
                     for i in range(len(autos))]
            for auto in autos:
                auto.iter()
            f.write("\r".join(lines).encode("utf-8"))
            f.write(b"\n")  # new line


if __name__ == "__main__":
    main()
