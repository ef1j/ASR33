#!/usr/bin/env python
# requires python 3 (or wide-char python 2.7, which you probably have to build from source)

# Return a SVG URL for an emoji character
# Example:
# `emojiurl heart` => 'https://twemoji.maxcdn.com/svg/2764.svg'

import sys
import requests
import random
import emoji_data_python
from emoji_unicode.models import EMO_VARIATION, JOINER_CHARS
from emoji_unicode.utils import code_point_to_unicode


EMOJI_SOURCE = "noto"

if EMOJI_SOURCE == "twemoji":
    # Images: Use twemoji SVG from their CDN.
    # Filenames are lowercase, with hyphens separating codepoints, e.g. "1f1e8-1f1f3.svg"
    # BASE_URL = "https://twemoji.maxcdn.com/svg/{}.svg"
    BASE_URL = "https://cdnjs.cloudflare.com/ajax/libs/twemoji/11.1.0/2/svg/{}.svg"
    SEP = "-"
elif EMOJI_SOURCE == "noto":
    # Images: Use noto SVG from github.
    # Filenames are lowercase, with underscore separating codepoints, e.g. "emoji_u1f9d7_200d_2642.svg"
    BASE_URL = "https://raw.githubusercontent.com/googlei18n/noto-emoji/master/svg/emoji_u{}.svg"
    SEP = "_"


# max suggestions
MAX_SUGGEST = 6


def with_joiners(thing):
    # Emoji codes including ZWJ characters
    hexcodes = ["{pt:x}".format(pt=ord(c)) for c in thing]
    return SEP.join(
        c.lstrip('0').lower()
        for c in hexcodes
    )


def without_variations(thing):
    # Emoji codes excluding Variations
    hexcodes = ["{pt:x}".format(pt=ord(c)) for c in thing]
    return SEP.join(
        c.lstrip('0').lower()
        for c in hexcodes
        if code_point_to_unicode(c) not in {EMO_VARIATION}
    )


def without_joiners(thing):
    # Emoji codes excluding ZWJ characters and Variations
    hexcodes = ["{pt:x}".format(pt=ord(c)) for c in thing]
    return SEP.join(
        c.lstrip('0').lower()
        for c in hexcodes
        if code_point_to_unicode(c) not in JOINER_CHARS
    )


def popular():
    # Suggest some of the most popular
    popularmoji = requests.get("https://api.emojitracker.com/v1/rankings").json()[:MAX_SUGGEST]
    popular = []
    for p in popularmoji:
        e = emoji_data_python.find_by_name(p["name"])
        if e:
            popular.append(e[0].short_name)

    sys.stderr.write("Try: {}\n".format(" ".join(popular)))


def selection():
    # Suggest some randomly
    emojis = random.sample(emoji_data_python.emoji_data, MAX_SUGGEST)
    selected = [emoj.short_name for emoj in emojis]
    sys.stderr.write("Try: {}\n".format(" ".join(selected)))


def suggest(arg):
    # Suggest based on the argument
    if arg == "":
        popular()
    else:
        choices = set()
        while len(choices) == 0 and len(arg)>=2:
            choices = emoji_data_python.find_by_shortname(arg)
            choices.extend(emoji_data_python.find_by_name(arg))
            choices = set(choices)
            if len(choices) == 0:
                arg = arg[:len(arg)-1]
        if len(choices) == 0:
            sys.stderr.write("Not found! ")
            selection()
        else:
            cn = sorted([(choice.short_name or choice.name).lower() for choice in choices])[:MAX_SUGGEST]
            sys.stderr.write("Not found! Try: {}\n".format(", ".join(cn)))


def main():

    # Prep the dict for emoji

    # Build a cached dictionary of short names for quicker access, short code keys are normalized with underscores
    emoji_dict = {
        emoji.unified: emoji for emoji in emoji_data_python.emoji_data
    }

    s = requests.Session()
    for arg in sys.argv[1:]:
        arg = arg.lower()
        if arg == "":
            continue

        # See if there's a simple match
        emoji = emoji_data_python.emoji_short_names.get(arg)
        if emoji is None:
            suggest(arg)
            sys.exit(1)

        # print(emoji.__dict__)

        # Get the SVG URL: first try 'obsoleted_by', 'unified', and variations thereof
        uris = []
        if emoji.obsoleted_by in emoji_dict:
            emoji1 = emoji_dict[emoji.obsoleted_by]
            uris.append(BASE_URL.format(emoji1.unified.replace("-", SEP).lower()))
            uris.append(BASE_URL.format(with_joiners(emoji1.char)))
            uris.append(BASE_URL.format(without_variations(emoji1.char)))
            uris.append(BASE_URL.format(without_joiners(emoji1.char)))
        uris.append(BASE_URL.format(emoji.unified.replace("-", SEP).lower()))
        uris.append(BASE_URL.format(with_joiners(emoji.char)))
        uris.append(BASE_URL.format(without_variations(emoji.char)))
        uris.append(BASE_URL.format(without_joiners(emoji.char)))

        found = False
        uri = None
        for one_uri in uris:
            r = s.head(one_uri)
            if r.status_code == 200:
                found = True
                uri = one_uri
                break

        if found:
            # OK, found it
            print(uri)
            sys.exit(0)
        else:
            # Suggest alternatives that might be findable
            suggest(arg)
            sys.exit(1)

    selection()
    sys.exit(1)


main()
