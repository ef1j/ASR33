#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2014-2018 Hugh Pyle

# print big letters on paper tape
# letterforms based on 'FF Papertape' font by Matthias Jordan
# NB requires "8-bit-clean" punch data path! e.g. you may need 'stty -onlcr'

import sys
import click


# Escape sequence to initialize (turn off wordwrap, NLCR, delays)
INIT = b"\033[?7l\033_ab\234"
RESET = b"\033[!p"

# emoji to print in binary
HEART_EMOJI = u'\u2764\ufe0f'

# How many nulls before and after the print
LEAD = 5
TAIL = 5

tape_chars = {
    0x20: [0, 0],
    0x21: [0b10111],
    0x22: [0b00011, 0b00000, 0b00011],
    0x23: [0b01010, 0b11111, 0b01010, 0b11111, 0b01010],
    0x24: [0b10010, 0b10101, 0b11111, 0b10101, 0b01000],
    0x25: [0b10011, 0b01011, 0b00100, 0b11010, 0b11001],
    0x26: [0b01010, 0b10101, 0b10110, 0b01000, 0b10100],
    0x27: [0b00000, 0b00011],
    0x28: [0b01110, 0b10001],
    0x29: [0b10001, 0b01110],
    0x2a: [0b00110, 0b00110],
    0x2b: [0b00100, 0b00100, 0b11110, 0b00100, 0b00100],
    0x2c: [0b100000, 0b10000],
    0x2d: [0b00100, 0b00100, 0b00100],
    0x2e: [0b10000],
    0x2f: [0b10000, 0b01000, 0b00100, 0b00010, 0b00001],
    0x30: [0b01110, 0b10001, 0b10001, 0b01110],
    0x31: [0b00010, 0b11111],
    0x32: [0b11010, 0b10101, 0b10101, 0b10010],
    0x33: [0b10001, 0b10101, 0b10101, 0b01010],
    0x34: [0b00111, 0b00100, 0b00100, 0b11110],
    0x35: [0b10111, 0b10101, 0b10101, 0b01001],
    0x36: [0b01110, 0b10101, 0b10101, 0b01000],
    0x37: [0b10001, 0b01001, 0b00101, 0b00011],
    0x38: [0b01010, 0b10101, 0b10101, 0b01010],
    0x39: [0b10010, 0b10101, 0b10101, 0b01110],
    0x3a: [0b10010],
    0x3b: [0b100000, 0b10010],
    0x3c: [0b00100, 0b01010, 0b10001],
    0x3d: [0b01010, 0b01010, 0b01010, 0b01010],
    0x3e: [0b10001, 0b01010, 0b00100],
    0x3f: [0b00010, 0b11001, 0b00101, 0b00010],
    0x40: [0b01110, 0b10001, 0b10111, 0b10111, 0b00110],
    0x41: [0b11110, 0b00101, 0b00101, 0b11110],             # A
    0x42: [0b11111, 0b10101, 0b10101, 0b01010],
    0x43: [0b01110, 0b10001, 0b10001, 0b10001],
    0x44: [0b11111, 0b10001, 0b10001, 0b01110],
    0x45: [0b11111, 0b10101, 0b10101, 0b10001],
    0x46: [0b11111, 0b00101, 0b00101, 0b00001],
    0x47: [0b01110, 0b10001, 0b10101, 0b11101],
    0x48: [0b11111, 0b00100, 0b00100, 0b11111],
    0x49: [0b11111],
    0x4a: [0b01000, 0b10000, 0b01111],
    0x4b: [0b11111, 0b00100, 0b01010, 0b10001],
    0x4c: [0b11111, 0b10000, 0b10000],
    0x4d: [0b11111, 0b00010, 0b00100, 0b00010, 0b11111],
    0x4e: [0b11111, 0b00010, 0b00100, 0b11111],
    0x4f: [0b01110, 0b10001, 0b10001, 0b10001, 0b01110],
    0x50: [0b11111, 0b00101, 0b00101, 0b00010],
    0x51: [0b01110, 0b10001, 0b10101, 0b11001, 0b11110],
    0x52: [0b11111, 0b00101, 0b00101, 0b11010],
    0x53: [0b10010, 0b10101, 0b10101, 0b01000],
    0x54: [0b00001, 0b00001, 0b11111, 0b00001, 0b00001],
    0x55: [0b01111, 0b10000, 0b10000, 0b01111],
    0x56: [0b00011, 0b01100, 0b10000, 0b01100, 0b00011],
    0x57: [0b00111, 0b11000, 0b00110, 0b11000, 0b00111],
    0x58: [0b11011, 0b00100, 0b00100, 0b11011],
    0x59: [0b00011, 0b00100, 0b11000, 0b00100, 0b00011],
    0x5a: [0b11001, 0b10101, 0b10101, 0b10011],                 # Z
    0x5b: [0b11111, 0b10001],
    0x5c: [0b00001, 0b00010, 0b00100, 0b01000, 0b10000],
    0x5d: [0b10001, 0b11111],
    0x5e: [0b00010, 0b00001, 0b00010],
    0x5f: [0b10000, 0b10000, 0b10000],
    0x60: [0b00001, 0b00010],
    0x61: [0b01100, 0b10010, 0b10010, 0b11110],                 # a
    0x62: [0b11111, 0b10010, 0b10010, 0b01100],
    0x63: [0b01100, 0b10010, 0b10010],
    0x64: [0b01100, 0b10010, 0b10010, 0b11111],
    0x65: [0b01100, 0b10110, 0b10110, 0b10100],
    0x66: [0b11110, 0b00101, 0b00001],
    0x67: [0b100100, 0b101010, 0b101010, 0b011110],
    0x68: [0b11111, 0b00010, 0b00010, 0b11100],
    0x69: [0b11101],
    0x6a: [0b100000, 0b011101],
    0x6b: [0b11111, 0b00100, 0b00100, 0b01010, 0b10000],
    0x6c: [0b01111, 0b10000],
    0x6d: [0b11110, 0b00010, 0b11110, 0b00010, 0b11100],
    0x6e: [0b11110, 0b00010, 0b00010, 0b11100],
    0x6f: [0b01100, 0b10010, 0b10010, 0b10010, 0b01100],
    0x70: [0b111110, 0b10010, 0b10010, 0b01100],
    0x71: [0b01100, 0b10010, 0b10010, 0b111110],
    0x72: [0b11100, 0b00010, 0b00010],
    0x73: [0b10100, 0b10110, 0b01010],
    0x74: [0b01111, 0b10010, 0b10010],
    0x75: [0b01110, 0b10000, 0b10000, 0b11110],
    0x76: [0b00110, 0b01000, 0b10000, 0b01000, 0b00110],
    0x77: [0b01110, 0b11000, 0b00110, 0b11000, 0b01110],
    0x78: [0b11010, 0b00100, 0b00100, 0b11010],
    0x79: [0b100110, 0b11000, 0b01000, 0b00110],
    0x7a: [0b10010, 0b11010, 0b10110, 0b10010],                 # z
    0x7b: [0b00100, 0b11011, 0b10001],
    0x7c: [0b11111],
    0x7d: [0b10001, 0b11011, 0b00100],
    0x7e: [0b00010, 0b00001, 0b00010, 0b00001],
    0x7f: [0, 0]
}

PRINT_CHAR = "o"


def write_bdf():
    # Write a BDF font
    print("""STARTFONT 2.1
COMMENT https://github.com/hughpyle/ASR33/
FONT -tape-tape--6-60-75-75-C-60-ISO10646-1
SIZE 6 75 75
FONTBOUNDINGBOX 5 6 0 -1
STARTPROPERTIES 11
    FOUNDRY "tape"
    PIXEL_SIZE 6
    POINT_SIZE 60
    RESOLUTION_X 75
    RESOLUTION_Y 75
    CHARSET_REGISTRY "ISO10646"
    CHARSET_ENCODING "1"
    FONT_ASCENT 5
    FONT_DESCENT 1
    DEFAULT_CHAR 0
    COPYRIGHT "Copyright (c) 2018 by Hugh Pyle.  Distributed under the MIT license."
ENDPROPERTIES""")
    print("CHARS {}".format(len(tape_chars)))

    def name(char):
        return "U+{:04x}".format(char)

    for char in tape_chars.keys():
        print("STARTCHAR {}".format(name(char)))
        print("ENCODING {}".format(char))
        dw = len(tape_chars[char]) + 1
        print("SWIDTH {} 0".format(dw*125))   # how far the origin moves after display
        print("DWIDTH {} 0".format(dw))     # how far the origin moves after display
        print("BBX 5 6 0 -1")   # (width height offsetX offsetY) of the lit pixels
        # The bitmap is: (height) lines of hex data, right-padded with zeros.
        # note: this is a horizontal read-out from the top down,
        # but our `tape_chars` characters are vertically oriented (columns) with LSB=bottom.
        # e.g. for "A", { 0x41: [0b11110, 0b00101, 0b00101, 0b11110] } reads as 10010000,
        print("BITMAP")
        bit = 1
        n = 1
        while bit < 64:
            t = 0
            for col in (tape_chars[char] + [0, 0, 0, 0, 0, 0, 0, 0])[:8]:
                t = (t << 1) | bool(col & bit)
            print("{:02x}".format(t))
            bit = bit * 2
            n = n + 1
        print("ENDCHAR")
    print("ENDFONT")
    pass


def print_all():
    bit = 1
    while bit < 64:
        t = ""
        for (k, v) in tape_chars.items():
            for col in v:
                if col & bit:
                    c = PRINT_CHAR
                else:
                    c = " "
                pass
                t = t + c
            t = t + "  "
        print(t)
        bit = bit * 2


def print_string(s):
    bit = 1
    while bit < 64:
        t = ""
        for char in s:
            v = tape_chars.get(ord(char), 0)
            for col in v:
                if col & bit:
                    c = PRINT_CHAR
                else:
                    c = " "
                pass
                t = t + c
            t = t + "  "
        if bit == 4:
            print("." * len(t))
        print(t)
        bit = bit * 2


def print_binary(s):
    sys.stdout.buffer.write(INIT)
    # sys.stdout.buffer.write(b'\0' * LEAD)
    # sys.stdout.buffer.write(u"{}".format(HEART_EMOJI).encode("utf-8"))
    sys.stdout.buffer.write(b'\0' * LEAD)
    for char in s:
        v = tape_chars.get(ord(char), 0)
        for col in v:
            t = 0
            bit = 1
            while bit < 64:
                t = t | (col & bit) << 1
                bit = bit * 2
            sys.stdout.buffer.write(bytearray([t]))
        sys.stdout.buffer.write(b'\0')
    sys.stdout.buffer.write(b'\0' * TAIL)
    sys.stdout.buffer.write(RESET)


@click.command(context_settings={"ignore_unknown_options": True})
@click.argument('words', nargs=-1, type=click.UNPROCESSED)
@click.option("--bdf", is_flag=True)
def main(bdf, words):
    label = " ".join(words)
    if bdf:
        write_bdf()
    else:
        print_binary(label)
    pass


main()
