#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2014-2019 Hugh Pyle

"""
Print patterns on paper-tape.

Source material for patterns are in files in a subdirectory 'patterns'.
Each pattern-file has data in Python literal format that defines things we can print.
(The format looks like JSON but isn't... so that we can use expressions like '0b11110000' to write binary).

At the top level are names, so you can call this script with:
    pattern pattern_file pattern_name
If no pattern-name is specified, it'll look for the name called "pattern".

Also: you can substitute "<" for "{", and ">" for "}".

Things you can do in this file format:
{
    # A named pattern which is a list of bytes (as long as you like).
    # 'None' is the same as a zero byte.
    "pattern_name": [
        0b00011000,         # note the first five bits are "below the track" and last three bits are "above the track"
        0b01111110,
        0b00100100,
        None
    ]

    # A pattern that includes repeating 'pattern_name' 10 times
    "example2": [
        0b1111111,
        < 10: "pattern_name" >
        0b1111111
    ]

    # A repeated list... nest these any way you want
    "example3": [
        < 10: [1, 2, 3, 4, 5] >
    ]

    # There are various 'operators' that let you transform data in various ways
    # The syntax is in parentheses: (operator-name, values...)
    "example4": [
        ("invert", "pattern_name"),     # invert set/unset bits in the pattern
        ("shift", "pattern_name", 2)    # shift bits left
    ]

    # Write text using the "text" operator
    "example5": [
        ("squeeze", ("text", "hello", "mod3270"))   # using 'squeeze' to convert fixed-pitch fonts to proportional!
    ]
}

The operators are identified with '@Operator(..name..)' below.  See each operator for details.

"""

import os
import sys
import ast
import types
import random
import math
import tempfile
import click
from PIL import Image, ImageFont, ImageDraw, BdfFontFile
from PIL.Image import FLOYDSTEINBERG  # dither


# Escape sequence to initialize (turn off wordwrap, NLCR, delays)
# (Usually a teletype wouldn't have firmware that handles escape sequences, but mine does, for this purpose)
# (https://github.com/hughpyle/ASR33/tree/master/firmware)
INIT = b"\033[?7l\033_ab\234"
RESET = b"\033[!p"

# Pattern files are in a subdirectory 'patterns'
# (https://github.com/hughpyle/ASR33/tree/master/bin/patterns)
PATTERN_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "patterns")

# Font files are in a subdirectory 'fonts'
# (https://github.com/hughpyle/ASR33/tree/master/bin/fonts)
DEFAULT_FONT = "chicago"
FONT_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "fonts")
ALL_FONTS = sorted([os.path.splitext(filename)[0] for filename in os.listdir(FONT_PATH) if filename.endswith(".bdf")])


def byte8(value):
    """Convert an 8-bit value to a byte"""
    return int.to_bytes(value & 0xFF, 1, byteorder="little")


def byte9(value):
    """Convert a 9-bit value to a byte.  The 4th bit is the "tape track" and gets dropped."""
    value = ((value & 0b111110000) >> 1) + (value & 0b111)
    return int.to_bytes(value & 0xFF, 1, byteorder="little")


def random_bit(prob):
    """A random bit with a given probability"""
    return random.choices([0, 1], weights=[1-prob, prob])[0]


class MovableBytes(bytes):
    """Bytes and a number that says where to position them in the final rendering"""
    def __new__(cls, *args, pos=0, **kwargs):
        cls.pos = pos
        return bytes.__new__(cls, *args, **kwargs)


class Operator(object):
    """Decorator, declares a method to be an operator"""
    def __init__(self, operator_name):
        self.operator_name = "_" + operator_name

    def __call__(self, func):
        """Called at decoration time"""
        # Set or extend the function's "operator_name" attribute
        func.operator_name = self.operator_name
        # The decorated function is unchanged
        return func


def memoize(f):
    """ Memoization decorator for a function taking a single argument """
    class memodict(dict):
        def __missing__(self, key):
            ret = self[key] = f(key)
            return ret
    return memodict().__getitem__


class Pattern(object):

    data = {}

    def __init__(self, pattern, words=None, default_font="smallcaps"):
        self.words = words
        self.default_font = default_font
        self.load_pattern(pattern)

    @staticmethod
    def eval(expr):
        """
        Evaluate a literal string
        Before parsing to AST, brute-force replace <> to {}
        so that you can write patterns without using curly-braces.
        :param string:
        :return: object
        """
        expr = expr.replace("<", "{")
        expr = expr.replace(">", "}")
        return ast.literal_eval(expr)

    def load_pattern(self, pattern):
        """
        Load a pattern from file.
        """
        pattern_filename = os.path.join(PATTERN_PATH, pattern)
        if not os.path.isfile(pattern_filename):
            click.get_current_context().fail("Pattern not found ({})".format(pattern_filename))
        with open(pattern_filename, "r") as fd:
            self.data = self.eval(fd.read())

    def parts(self):
        """
        :return: A list of the available parts in the pattern-file.
        """
        return self.data.keys()

    def substitute_args(self, value):
        return value.replace("$*", " ".join(self.words))

    def substitute_path(self, value):
        return os.path.expanduser(self.substitute_args(value))

    def operator(self, value_tuple):
        """
        Apply an operator to a value.
        :param value_tuple: (operator name, value, optional other parameters)
        :return: the result of the operator.
        """
        oper = value_tuple[0]
        value = value_tuple[1]
        more_args = value_tuple[2:]
        for attr in dir(self):
            obj = getattr(self, attr)
            if callable(obj) and hasattr(obj, "operator_name") and getattr(obj, "operator_name") == "_" + oper:
                # We don't render the arguments -- pass into the operator, so e.g. list operators can iterate
                if more_args:
                    return obj(value, *more_args)
                else:
                    return obj(value)
        raise ValueError("Unknown operator: '{}'".format(oper))

    @Operator("invert")
    def invert(self, value):
        """Invert the bits of the value"""
        value = self.render_value(value)
        return b"".join([byte8(0xFF ^ byte) for byte in value])

    @Operator("mirror")
    def mirror(self, value):
        """Reverse the bits of the value"""
        value = self.render_value(value)
        return b"".join([byte8(int('{:08b}'.format(byte)[::-1], 2)) for byte in value])

    @Operator("shift")
    def shift(self, value, n):
        """
        Shift the bits left by 'n' (right if n is negative)
        """
        value = self.render_value(value)
        n = self.render_value(n)[0]
        if n > 0:
            return [byte << n for byte in value]
        else:
            return [byte >> -n for byte in value]

    @Operator("shift9")
    def shift9(self, value, n):
        """
        Shift the bits left by 'n' (right if n is negative) using a 9-bit grid
        """
        value = self.render_value(value)
        n = self.render_value(n)[0]
        if n > 0:
            return b"".join([byte9(byte << n) for byte in value])
        else:
            return b"".join([byte9(byte >> -n) for byte in value])

    @Operator("subset")
    def subset(self, value, n):
        """Return a subset of the value"""
        value = self.render_value(value)
        n = self.render_value(n)[0]
        if n > 0:
            # The first n bytes of the value
            return value[:n]
        else:
            # The last n bytes of the value
            return value[n:]

    @Operator("squeeze")
    def squeeze(self, value, whitespace_only=True):
        """
        Squeeze all the duplicate lines out of the value (e.g. consolidate whitespace)
        Usage: ("squeeze", "pattern"), or ("squeeze", "pattern", False) to remove all dups not just whitespace
        """
        value = self.render_value(value)
        squeezed = []
        for byte in value:
            b = byte8(byte)
            use = False
            if not squeezed:
                use = True
            elif whitespace_only and (b != squeezed[-1] or b != b'\0'):
                use = True
            elif b != squeezed[-1]:
                use = True
            if use:
                squeezed.append(b)
        return b"".join(squeezed)

    @Operator("move")
    def move(self, value, n):
        """Move the value forward or backward by 'n' positions along the tape."""
        value = self.render_value(value)
        n = self.render_value(n)[0]
        return MovableBytes(value, pos=n)

    @Operator("random_choice")
    def random_choice(self, value):
        """Choose one from a list"""
        value = self.render_value(value)
        return random.choice(value)

    @Operator("random_shuffle")
    def random_shuffle(self, value):
        """Produce the elements of a list in random order"""
        value = self.render_value(value)
        random.shuffle(value)
        return value

    @Operator("random_bits")
    def random_bits(self, value):
        """Produce a random number with 'value/256' probability of each bit being set"""
        value = self.render_value(value)
        data = bytearray()
        for val in value:
            byte = 0
            for bit in range(0, 8):
                byte = byte << 1
                byte |= random_bit(val/256)
            data.append(byte & 0xFF)
        return bytes(data)

    @Operator("random_fire")
    def random_fire(self, value):
        """Produce a random number with growing probability of each bit being set"""
        byte = 0
        for val in range(0, value, int(math.copysign(1, value))):
            byte = byte << 1
            byte |= random_bit(val/value)
        return byte

    @Operator("random")
    def random(self, value, value2):
        """Produce a random integer from (int)value to (int)value2"""
        return random.randint(value, value2)

    @Operator("sequence")
    def sequence(self, value, value2, stride=1):
        """Produce the integers from (int)value to (int)value2 inclusive, incrementing by stride"""
        return [n for n in range(value, value2+1, stride)]

    @Operator("gray_sequence")
    def gray(self, value, value2, stride=1):
        """Produce the gray codes from (int)value to (int)value2 inclusive"""
        return [n ^ (n >> 1) for n in range(value, value2+1, stride)]

    @Operator("monotonic_gray_sequence")
    def monogray(self, value, value2):
        """Produce a sequence of monotonic Gray codes"""
        # from: https://sciyoshi.com/2010/12/gray-codes/
        def rotate_right(x, n):
            return x[-n:] + x[:-n]

        @memoize
        def pi(n):
            if n <= 1:
                return (0,)
            x = pi(n - 1) + (n - 1,)
            return rotate_right(tuple(x[k] for k in x), 1)

        def p(n, j, reverse=False):
            if n == 1 and j == 0:
                if not reverse:
                    yield (0,)
                    yield (1,)
                else:
                    yield (1,)
                    yield (0,)
            elif j >= 0 and j < n:
                perm = pi(n - 1)
                if not reverse:
                    for x in p(n - 1, j - 1):
                        yield (1,) + tuple(x[k] for k in perm)
                    for x in p(n - 1, j):
                        yield (0,) + x
                else:
                    for x in p(n - 1, j, reverse=True):
                        yield (0,) + x
                    for x in p(n - 1, j - 1, reverse=True):
                        yield (1,) + tuple(x[k] for k in perm)

        def monotonic(n):
            for i in range(n):
                for x in (p(n, i) if i % 2 == 0 else p(n, i, reverse=True)):
                    yield x

        def bintuple(t):
            return int("".join(map(str, t)), 2)

        seq = list(map(bintuple, monotonic(8)))
        return seq[value:value2+1]

    @Operator("text")
    def text(self, value, font_name=None):
        """Render text using BDF fonts"""
        value = self.substitute_args(value)
        if value is None or value == "":
            return []
        if font_name is None:
            font_name = self.default_font
        font_filename = os.path.join(FONT_PATH, "{}.bdf".format(font_name))
        with open(font_filename, 'rb') as font_file:
            # Read the BDF font description
            bdf = BdfFontFile.BdfFontFile(font_file)

            # PIL requires we write the font as a .pil file before it can be used
            pil_filename = tempfile.mktemp(suffix=".pil")
            bdf.save(pil_filename)
            font = ImageFont.load(pil_filename)

            # Make a new image just the right size for the text
            line_w, line_h = font.getsize(value)
            img = Image.new('1', (line_w, line_h), color=0)

            # Write the text
            ImageDraw.Draw(img).text((0, 0), value, font=font, fill=1)

        os.unlink(pil_filename)
        os.unlink(os.path.splitext(pil_filename)[0] + ".pbm")

        if line_h <= 8:
            y0 = 0
            y1 = line_h
            height = line_h
        else:
            # The vertical positioning of the text varies by font, but we want "automatic" layout.
            # Scan the top and bottom of the bitmap to find and remove any blank lines.
            (_, y0, _, y1) = img.getbbox()
            height = y1 - y0

        img = img.crop((0, y0, line_w, y1))

        # Write the image as PNG for debugging
        # img.save("tf.png")

        # Read out the bits of the image, one column at a time, from the left.
        # Result is returned as an array of integers.  They may be larger than a byte,
        # but we want the full data to be available for shift() and other operations.
        pixels = img.load()
        result = []
        for pos_x in range(line_w):
            byte = 0
            for pos_y in reversed(range(height)):
                byte = (byte << 1) | pixels[pos_x, pos_y]
            result.append(byte)
        return result

    @Operator("image")
    def image(self, value, dither=None):
        """Read bits out of a bitmap image file (in black-and-white, of course)"""
        if dither:
            dither = FLOYDSTEINBERG
        value = self.substitute_path(value)
        img = Image.open(value).convert("L").convert("1", dither=dither)
        (width, height) = img.size
        pixels = img.load()
        result = []
        for pos_x in range(width):
            # Convert the whole column into a bitwise integer.  May be slow on large images.
            byte = 0
            for pos_y in reversed(range(height)):
                byte = (byte << 1) | (pixels[pos_x, pos_y] & 1)
            result.append(byte)
        return result

    @Operator("width")
    def width(self, value):
        """Return the width of the value in bits."""
        if not isinstance(value, list):
            return 8
        # TODO
        return 8

    def render_value(self, v):
        """
        Produce a list of integers, or 8-bit bytes, from the expression
        :param v: A part-name, or a simple value, or a string with a Python literal expression.
        :return: Integer array or bytes.
        """
        # Generate a list by evaluating the expression
        values = list(self.generate_value(v))
        # Join them all to a list of integers (or bytes if that's what we have)
        aresult = []
        bresult = bytearray()
        result = []
        for value in values:
            if aresult:
                result = aresult
            else:
                result = bresult
            if isinstance(value, MovableBytes):
                # MovableBytes are bytes to be overlaid on the existing result, backed up by 'value.pos'
                pos = min(value.pos, len(result) - 1)
                startpos = len(result) - pos
                for j in range(0, min(pos, len(value))):
                    result[startpos + j] |= value[j]
                result.extend(value[(pos):])
            elif isinstance(value, bytes):
                result.extend(value)
            else:
                if bresult:
                    # convert the bytearray so we can add integers to it, which might overflow the byte
                    aresult = [int(b) for b in bresult]
                    bresult = bytearray()
                if isinstance(value, list):
                    aresult.extend(value)
                else:
                    aresult.append(value)
        if aresult:
            return aresult
        else:
            return bytes(result)

    def generate_value(self, value):
        """
        Recursively generate all the renderings from a value.
        :param value: A part-name, or a simple value, or a string with a Python literal expression.
        :return: A generator producing a series of bytes-type values.
        """
        if isinstance(value, types.GeneratorType):
            value = list(value)

        if value is None:
            yield b'\0'
        elif isinstance(value, bytes):
            yield value
        elif isinstance(value, int):
            yield value
        elif isinstance(value, str):
            try:
                thing = self.render_part(value)
            except SyntaxError:
                # Uh, that's not the name of a part, it must be literally text
                thing = value.encode("utf-8")
            yield thing
        elif isinstance(value, dict):
            # Dictionary - key is numeric: a number of times that the value should be repeated
            # - negative numbers mean that the value is repeated in reverse
            for k in value.keys():
                if isinstance(k, tuple):
                    # Evaluate the tuple and expect it produces an integer
                    k = self.operator(k)
                if isinstance(k, str):
                    # To support repeats based on commandline args, e.g. {"$*": something}
                    try:
                        k = self.substitute_args(k)
                        k = int(k)
                    except ValueError:
                        raise ValueError("Expected an integer key, not {}: {}".format(type(k), k))
                if isinstance(k, int):
                    if k > 0:
                        # Repeat the value 'k' times
                        for i in range(0, k):
                            values = list(self.generate_value(value.get(k)))
                            for v in values:
                                yield v
                    else:
                        # Repeat the rendering 'k' times with bytes reversed
                        for i in range(0, -k):
                            values = self.render_value(value.get(k))
                            yield values[::-1]
                else:
                    raise ValueError("Expected an integer key, not {}: {}".format(type(k), value))
        elif isinstance(value, tuple):
            # Tuple - first element is the name of an operator that is applied to the other elements
            # The other elements will vary according to the operator
            # Result of the operator is bytes or anything else...
            results = self.operator(value)
            for v in list(self.generate_value(results)):
                yield v
            # yield self.generate_value(results)
        elif isinstance(value, list):
            # List - render each element in turn
            for val in value:
                for v in list(self.generate_value(val)):
                    yield v
        else:
            raise ValueError("Don't know how to render: {}".format(value))

    def render_part(self, part):
        """
        Generate bytes from a part
        :param part: A part-name, or a string with a Python literal expression.
        :return: Bytes.
        """
        if part in self.data:
            value = self.data[part]
        else:
            # Hmm, maybe the key is a python literal
            try:
                value = self.eval(part)
            except ValueError:
                raise ValueError("The pattern has no part named '{}'".format(part))
        bytes_or_ints = self.render_value(value)
        if isinstance(bytes_or_ints, bytes):
            return bytes_or_ints
        return bytes([(v or 0) & 0xFF for v in bytes_or_ints])


def list_patterns(ctx, param, value):
    """Click callback to print a list of the available patterns."""
    if not value or ctx.resilient_parsing:
        return
    all_patterns = sorted([os.path.splitext(filename)[0] for filename in os.listdir(PATTERN_PATH)])
    print("Available patterns:", file=sys.stderr)
    for pattern in all_patterns:
        print("  " + pattern, file=sys.stderr)
    ctx.exit()


def write_svg(data, border=True):
    """Write an SVG picture of the punched-tape strip"""
    sl = len(data) * 10 + 50
    sys.stdout.write("""<?xml version="1.0"?>
<svg version="1.1" xmlns="http://www.w3.org/2000/svg">
  <g transform="scale(1.0 1.0) translate(50,50)" style="fill:#000000;stroke:#000000;stroke-width:1.0">
    <path d="M 5,100 {},100 {},50 {},0 5,0 -45,50 Z" style="fill:none"/>
    <circle r="2" cx="-20" cy="40"/>
    <circle r="2" cx="-10" cy="40"/>
    <circle r="2" cx="0" cy="40"/>
""".format(sl, sl-50, sl))
    x = 0
    for byte in data:
        x = x + 10
        sys.stdout.write("""    <circle r="2" cx="{}" cy="40"/>\n""".format(x))
        y = 0
        for bit in range(0, 9):
            y = y + 10
            if bit != 3:
                if byte & 1:
                    sys.stdout.write("""    <circle r="3" cx="{}" cy="{}"/>\n""".format(x, y))
                byte = byte >> 1

    sys.stdout.write("""  </g>
</svg>""")



@click.command()
@click.argument("pattern", type=click.Path())
@click.argument('words', nargs=-1, type=click.UNPROCESSED)
@click.option("--font", default=DEFAULT_FONT, type=click.Path(), help="Font: {}".format(", ".join(ALL_FONTS)))
@click.option("--part", default="pattern", required=False, help="Write only one named part of a pattern-file")
@click.option("--all", is_flag=True, help="Write all the available parts in a pattern-file (slow!)")
@click.option("--svg", is_flag=True, help="Write SVG, not binary")
@click.option("--test", is_flag=True, help="Write text preview, not binary")
@click.option("--list", is_flag=True, help="List the available patterns", is_eager=True, callback=list_patterns, expose_value=False)
def main(pattern, part, all, svg, test, words, font):
    """
    Print patterns to punchtape.
    """
    # Load the pattern-definition file
    patt = Pattern(pattern, words=words, default_font=font)

    if all:
        barray = bytearray()
        for part in patt.parts():
            barray.extend(patt.render_part(part))
        data = bytes(barray)
    else:
        # Render the named part from the file.
        # Instead of a name, you can also supply a string containing a Python literal.
        data = patt.render_part(part)
    l = len(data)

    if not (test or svg):
        # Put the tty firmware into 'raw binary' mode
        sys.stdout.buffer.write(INIT)

    if svg:
        write_svg(data)
    elif test:
        for byte in data:
            sys.stdout.write("{:08b}\n".format(byte & 0xFF).replace("0", ".").replace("1", "*"))
    else:
        sys.stdout.buffer.write(bytearray(data))

    if not (test or svg):
        sys.stdout.buffer.write(RESET)

    print("Length: {} bits, {} inches".format(l, l/10), file=sys.stderr)


main()

