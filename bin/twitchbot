#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Based on (link below) which is copyright (c) 2017-2019 TwitchIO
# https://github.com/TwitchIO/TwitchIO/blob/rewrite/examples/subclass_bot.py

import os
import stat
import sys
import click
import asyncio
from twitchio.ext import commands


async def wait_for_mesg():
    # sleep until the tty is group-writeable
    while not (os.fstat(1).st_mode & stat.S_IWGRP):
        await asyncio.sleep(1)


class Bot(commands.Bot):

    def __init__(self,
                 irctok=None,
                 apitok=None,
                 nick=None,
                 ch=None,
                 quiet=False):
        super().__init__(
            irc_token=irctok,
            api_token=apitok,
            nick=nick,
            prefix='!',
            initial_channels=[ch]
        )
        self.channel = ch
        self.quiet = quiet

    # Handle the "ready" event
    async def event_ready(self):
        print(f'[twitch {self.channel}] Ready.')

    # Handle the "message" event
    async def event_message(self, message):
        if not (self.quiet or message.content.startswith("!")):
            await asyncio.ensure_future(wait_for_mesg())
            print(f'[twitch {self.channel}] {message.author.name}: {message.content}')
        await self.handle_commands(message)

    # Handle errors, and report 'no such command' to the author
    async def event_command_error(self, ctx, error):
        if isinstance(error, commands.CommandNotFound):
            await ctx.send('{}'.format(error))
        else:
            await super().event_command_error(ctx, error)

    # Command: !test
    @commands.command(name='test')
    async def my_command(self, ctx):
        await ctx.send(f'Hello {ctx.author.name}!')

    # Command: !bell - ring the bell on stderr
    @commands.command(name='bell')
    async def bell_command(self, ctx):
        sys.stderr.write(chr(7))


@click.command()
@click.option("--token", envvar='TWITCH_TOKEN', required=True)
@click.option("--nick", envvar='TWITCH_NICK', required=True)
@click.option("--ch", envvar='TWITCH_CHANNEL')
@click.option("--quiet", "-q", is_flag=True, default=False, help="quiet mode")
def main(token, nick, ch, quiet):
    if not token.startswith("oauth:"):
        print("Token should be 'oauth:xxxx'")
        sys.exit(1)
    if ch is None:
        ch = "#" + nick
    bot = Bot(irctok=token, apitok=token, nick=nick, ch=ch, quiet=quiet)
    bot.run()


if __name__ == "__main__":
    main()
